<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="
				http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
				http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
				http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <!-- NON XA DATASOURCE -->

   <bean id="persistenceDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${db.driver.class.name}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
        <property name="initialSize" value="${db.initial.size}" />
        <property name="maxActive" value="${db.max.active}" />
        <property name="defaultAutoCommit" value="false" />
        <property name="validationQuery" value="${db.validation.query}" />
        <property name="testOnBorrow" value="${db.test.on.borrow}" />
    </bean>

    <service ref="persistenceDataSource" interface="javax.sql.DataSource">
        <service-properties>
            <entry key="osgi.jndi.service.name" value="jdbc/persistenceDataSource" />
        </service-properties>
    </service>

    <!-- NON XA DATASOURCE  END -->



    <!-- <reference id="platformTxManager" interface="org.springframework.transaction.PlatformTransactionManager" availability="mandatory"/>
    <reference id="transactionManager" interface="javax.transaction.TransactionManager" />-->
    <reference id="recoverableTxManager" interface="org.apache.geronimo.transaction.manager.RecoverableTransactionManager" availability="mandatory" />

    <bean id="transactionSupport" class="org.apache.geronimo.connector.outbound.connectionmanagerconfig.XATransactions">
        <argument value="true" />
        <argument value="false" />
    </bean>


    <!-- http://geronimo.apache.org/maven/server/modules/geronimo-connector/apidocs/org/apache/geronimo/connector/outbound/connectionmanagerconfig/PartitionedPool.html -->
    <bean id="pooling" class="org.apache.geronimo.connector.outbound.connectionmanagerconfig.PartitionedPool">
        <!-- maxSize-->
        <argument value="${db.xa.maxSize}" />
        <!-- minSize -->
        <argument value="${db.xa.minSize}" />
        <!-- blockingTimeoutMilliseconds -->
        <argument value="${db.xa.blockingTimeoutMilliseconds}" />
        <!-- idleTimeoutMinutes -->
        <argument value="${db.xa.idleTimeoutMinutes}" />
        <!--matchOne -->
        <argument value="true" />
        <!-- matchAll -->
        <argument value="false" />
        <!--selectOneAssumeMatch -->
        <argument value="false" />
        <!--partitionByConnectionRequestInfo -->
        <argument value="true" />
        <!--partitionBySubject-->
        <argument value="false" />
    </bean>

    <!-- Sets up a Geronimo JCA connection manager which also supports pooling
    /**
    *
    * @param transactionSupport configuration of transaction support
    * @param pooling configuration of pooling
    * @param subjectSource If not null, use container managed security, getting the Subject from the SubjectSource
    * @param connectionTracker tracks connections between calls as needed
    * @param transactionManager recoverable transaction manager
    * @param name name
    * @param classLoader classloader this component is running in.
    */
    -->
    <bean id="connectionManager" class="org.apache.geronimo.connector.outbound.GenericConnectionManager">
        <argument index="0" ref="transactionSupport"/>
        <argument index="1" ref="pooling"/>
        <argument index="2"><null/></argument>
        <argument index="3"><null/></argument>
        <argument index="4" ref="recoverableTxManager" />
        <argument index="5" ref="jdbcManagedConnectionFactory" />
        <argument index="6" value="TracingXa-DS" />
        <argument index="7" ref="classLoader" />
    </bean>


    <bean id="classLoader" class="org.apache.aries.util.AriesFrameworkUtil" factory-method="getClassLoader">
        <argument ref="blueprintBundle" />
    </bean>
    <service ref="classLoader" auto-export="all-classes" />

    <!-- Creates the JDBC ConnectionFactory -->
    <bean id="persistenceXAdatasource" factory-ref="jdbcManagedConnectionFactory" factory-method="createConnectionFactory">
        <argument ref="connectionManager" />
    </bean>


    <!--<bean id="jdbcManagedConnectionFactory" class="com.truphone.esb.cdr.datasource.MySQLXAMCF">-->
    <bean id="jdbcManagedConnectionFactory" class="org.tranql.connector.postgresql.PGXAMCF">

        <property name="databaseName" value="${db.xa.name}"/>
        <property name="serverName" value="${db.xa.host}" />
        <property name="portNumber" value="${db.xa.port}" />
        <property name="userName" value="${db.xa.username}" />
        <property name="password" value="${db.xa.password}" />
    </bean>


    <service ref="persistenceXAdatasource" interface="javax.sql.DataSource">
        <service-properties>
            <entry key="osgi.jndi.service.name" value="jdbc/persistenceDataSourceXA" />
            <entry key="datasource.name" value="PersistenceXa-DS"/>
        </service-properties>
    </service>

    <!-- recoverable ResourceManager for JDBC DataSource, uses a wrapper class -->
    <bean id="transactionRecovery" class="it.extrasys.marche.regione.persistence.datasource.GenericResourceManager" init-method="doRecovery">
        <property name="connectionManagerContainer" ref="connectionManager"/>
        <property name="managedConnectionFactory" ref="jdbcManagedConnectionFactory"/>
    </bean>

</blueprint>