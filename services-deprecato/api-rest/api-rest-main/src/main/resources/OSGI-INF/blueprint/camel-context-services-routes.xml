<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
           xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws" xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:camelcxf="http://camel.apache.org/schema/blueprint/cxf"
           xsi:schemaLocation=" http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/schemas/blueprint/jaxws.xsd http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd ">


    <routeContext id="api.rest.services.routes.ctx" xmlns="http://camel.apache.org/schema/blueprint">

        <!--ADMINISTARTION-->
        <route>
            <from uri="seda:sendMail"/>
            <log message="rotta di invio mail -----> ${body}" />
            <setHeader headerName="from">
                <simple>{{report.indirizzo.email.username.intero}}</simple>
            </setHeader>
            <log message="FROM:  -->  {{report.indirizzo.email.username.intero}}"/>
            <setHeader headerName="to">
                <simple>${body[1]}</simple>
            </setHeader>
            <log message="TO:    -->  ${body[1]}" />
            <setHeader headerName="subject">
                <constant>Modifica Password IntermediaMarche</constant>
            </setHeader>
            <setHeader headerName="contentType">
                <constant>text/plain;charset=UTF-8</constant>
            </setHeader>
            <setBody>
                <simple>Reimposta la password al seguente link: ${body[2]}\nQuesto link ha una durata di 30 minuti. Se non si desidera re-impostare la password, ignorare il messaggio.\nCordiali Saluti. </simple>
            </setBody>
            <to uri="smtp://{{report.indirizzo.email.username.intero}}@{{report.indirizzo.email.host}}?port={{report.indirizzo.email.port}}&amp;mail.smtp.auth=false"/>
        </route>


        <!--ENTITIES-->
        <route>
            <from uri="direct:updateFTP"/>

            <removeHeaders pattern="*" excludePattern="idEnte"/>

            <setHeader headerName="CamelHttpMethod">
                <constant>PUT</constant>
            </setHeader>

            <toD uri="{{api.rest.url.ftp}}/ftp/aggiornaRotta/${headers.idEnte}?bridgeEndpoint=true"/>
        </route>

        <route>
            <from uri="direct:postFTP"/>

            <removeHeaders pattern="*" excludePattern="idEnte"/>

            <setHeader headerName="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>

            <toD uri="{{api.rest.url.ftp}}/ftp/creaRotta?bridgeEndpoint=true"/>
        </route>

        <route>
            <from uri="seda:keepGoing"/>

            <!--Carica file metadati-->
            <bean ref="fileLoader" method="loadMetadati"/>

            <to uri="xslt:xslt/metadati.xsl"/>

            <convertBodyTo type="java.lang.String" charset="UTF-8" />

            <setHeader headerName="metadati">
                <simple>${body}</simple>
            </setHeader>

            <setHeader headerName="dataFattura">
                <simple>${date:now:yyyy-MM-dd}</simple>
            </setHeader>

            <!--Carica file fattura-->
            <bean ref="fileLoader" method="loadFattura"/>

            <to uri="xslt:xslt/fattura.xsl"/>

            <convertBodyTo type="java.lang.String" charset="UTF-8" />

            <bean ref="fileLoader" method="encodeBase64"/>

            <setHeader headerName="checkFlussoSemplificato">
                <constant>false</constant>
            </setHeader>

            <setHeader headerName="dataRicezioneSdI">
                <simple>${date:now:yyyy-MM-dd HH:mm:ss.SSS}</simple>
            </setHeader>

            <setHeader headerName="fatturazioneTest">
                <constant>true</constant>
            </setHeader>

            <inOnly uri="{{sdi.inbound.salva.fatture.in.queue}}" id="salvafatture"/>

        </route>


        <!--MONITORAGGIO-->
        <route id="api.rest.services.monitoraggio.headers-master">
            <from uri="direct:setta-headers-jolokia-master"/>

            <!--MASTER-->
            <setHeader headerName="jolokiaUrl">
                <simple>{{api.rest.jolokia.url.master}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaUsername">
                <simple>{{api.rest.jolokia.username.master}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaPassword">
                <simple>{{api.rest.jolokia.password.master}}</simple>
            </setHeader>

            <setHeader headerName="brokerFirstPart">
                <simple>{{api.rest.jolokia.broker.url.first.part}}</simple>
            </setHeader>

            <setHeader headerName="brokerSecondPart">
                <simple>{{api.rest.jolokia.broker.url.second.part}}</simple>
            </setHeader>

            <setHeader headerName="brokerAttribute">
                <simple>{{api.rest.jolokia.broker.attribute}}</simple>
            </setHeader>

            <setHeader headerName="destinationName">
                <simple>{{api.rest.jolokia.broker.destination.name}}</simple>
            </setHeader>

            <process ref="autenticazioneProcess"/>

            <bean ref="jolokiaClient" method="getJolokiaDLQ"/>

            <choice>
                <when>
                    <simple>${body} != null</simple>

                    <process ref="statoCodeResponseProcess"/>
                </when>
            </choice>


        </route>

        <route id="reinvio.pec.quartz.endpoint">
            <from uri="{{regma.quartz.endpoint}}"/>

            <log message="BATCH START"/>

            <to uri="direct:reinviaPecNonConsegnate"/>
        </route>

        <route id="reinviaPecNonConsegnte">
            <from uri="direct:reinviaPecNonConsegnate"/>
            <log message="REINVIA PEC NON CONSEGNATE STARTED"/>

            <!-- chiamata al broker per trovare il size attuale della coda -->
            <!-- basic authentication -->

            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>

            <setHeader headerName="Authorization">
                <simple>{{regma.basic.authorization.macchina.code}}</simple>
            </setHeader>

            <to uri="{{regma.pec.mancata.consegna.richiesta.queue.size}}"/>

            <unmarshal ref="jack"/>

            <setHeader headerName="queueInSize">
                <simple>${body[value]}</simple>
            </setHeader>

            <log message="size queue ${header.queueInSize}"/>

            <log message="@@@@@@@ body ${body} --- value ${body[value]}"/>

            <choice>
                <when>
                    <simple>${header.queueInSize} == null</simple>

                    <log message="coda VUOTA, non devo fare operazioni"/>

                </when>
                <otherwise>

                    <bean ref="reinviaPecNonConsegnate" method="scodaQueue"/>

                </otherwise>
            </choice>

            <!-- REINVIA FATTURA PEC -->
            <choice>
                <when>
                    <simple>${headers.listaIdentificativiSdIFatture} != '' and ${headers.listaIdentificativiSdIFatture} != null </simple>
                    <!--<simple>${headers.listaIdentificativiSdIFatture} != ''</simple>-->
                    <log message="listaIdentificativiSdiFatture non vuota"/>

                    <setHeader headerName="listaIdentificativiSdI">
                        <simple>${headers.listaIdentificativiSdIFatture}</simple>
                    </setHeader>

                    <convertBodyTo type="java.lang.String"/>
                    <bean ref="utils" method="controllaListaSDI"/>

                    <setBody>
                        <header>listaIdentificativiSdI</header>
                    </setBody>

                    <log message="listaIdentificativiSdI: [${headers.listaIdentificativiSdI}]"/>

                    <split>
                        <tokenize token=","  includeTokens="false" trim="true"/>

                        <log message="INVIA FATTURA DA DATABASE Identificaitivo SdI: ${body}"/>

                        <bean ref="utils" method="prepareExchange"/>

                        <log message="BODY PRE CHIAMATA REINVIA FATTURA ${body}"/>

                        <!-- chiamata nuovo metodo reinvia da database -->
                        <to uri="direct:reinvia-fattura"/>

                    </split>

                </when>
                <otherwise>
                    <log message="Fatture: lista identificativi sdi vuota, non devo fare operazioni"/>
                </otherwise>
            </choice>

            <!-- REINVIA DECORRENZA TERMINI PEC -->
            <choice>
                <when>
                    <simple>${headers.listaIdentificativiSdIDecorrenze} != '' and ${headers.listaIdentificativiSdIDecorrenze} != null </simple>
                    <log message="listaIdentificativiSdiDecorrenze non vuota"/>
                    <setHeader headerName="listaIdentificativiSdI">
                        <simple>${headers.listaIdentificativiSdIDecorrenze}</simple>
                    </setHeader>
                    <convertBodyTo type="java.lang.String"/>


                    <bean ref="utils" method="controllaListaSDI"/>

                    <setBody>
                        <header>listaIdentificativiSdI</header>
                    </setBody>

                    <log message="listaIdentificativiSdI: [${headers.listaIdentificativiSdI}]"/>

                    <split>
                        <tokenize token=","  includeTokens="false" trim="true"/>

                        <log message="INVIA DECORRENZA TERMINI DA DATABASE Identificativo SdI: ${body}"/>

                        <bean ref="utils" method="prepareExchange"/>

                        <log message="BODY PRE CHIAMATA REINVIA DECORRENZA TERMINI ${body}"/>

                        <!-- chiamata nuovo metodo reinvia da database -->
                        <to uri="direct:reinvia-decorrenza-termini"/>

                        <log message="REINVIA PEC NON CONSEGNATE FINISHED"/>

                    </split>

                </when>
                <otherwise>
                    <log message="Dec. Termini: lista identificativi sdi vuota, non devo fare operazioni"/>
                </otherwise>
            </choice>
        </route>

        <!-- REINVIA PEC CA -->

        <route id="reinvio.pec.ca.quartz.endpoint">
            <from uri="{{regma.ca.quartz.endpoint}}"/>

            <log message="BATCH START"/>

            <to uri="direct:reinviaPecCaNonConsegnate"/>
        </route>

        <route id="reinviaPecCaNonConsegnte">
            <from uri="direct:reinviaPecCaNonConsegnate"/>
            <log message="REINVIA PEC CA NON CONSEGNATE STARTED"/>

            <!-- chiamata al broker per trovare il size attuale della coda -->
            <!-- basic authentication -->

            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>

            <setHeader headerName="Authorization">
                <simple>{{regma.basic.authorization.macchina.code}}</simple>
            </setHeader>

            <to uri="{{regma.pec.ca.mancata.consegna.richiesta.queue.size}}"/>

            <unmarshal ref="jack"/>

            <setHeader headerName="queueInSize">
                <simple>${body[value]}</simple>
            </setHeader>

            <log message="size queue ${header.queueInSize}"/>

            <log message="@@@@@@@ body ${body} --- value ${body[value]}"/>

            <choice>
                <when>
                    <simple>${header.queueInSize} == null</simple>

                    <log message="coda VUOTA, non devo fare operazioni"/>

                </when>
                <otherwise>

                    <bean ref="reinviaPecCaNonConsegnate" method="scodaQueue"/>

                </otherwise>
            </choice>

            <!-- REINVIA FATTURA PEC -->
            <choice>
                <when>
                    <simple>${headers.listaIdentificativiSdIFatture} != '' and ${headers.listaIdentificativiSdIFatture} != null </simple>
                    <!--<simple>${headers.listaIdentificativiSdIFatture} != ''</simple>-->
                    <log message="listaIdentificativiSdiFatture non vuota"/>

                    <setHeader headerName="listaIdentificativiSdI">
                        <simple>${headers.listaIdentificativiSdIFatture}</simple>
                    </setHeader>

                    <convertBodyTo type="java.lang.String"/>
                    <bean ref="utils" method="controllaListaSDI"/>

                    <setBody>
                        <header>listaIdentificativiSdI</header>
                    </setBody>

                    <log message="listaIdentificativiSdI: [${headers.listaIdentificativiSdI}]"/>

                    <split>
                        <tokenize token=","  includeTokens="false" trim="true"/>

                        <log message="INVIA FATTURA DA DATABASE Identificaitivo SdI: ${body}"/>

                        <bean ref="utils" method="prepareExchange"/>

                        <log message="BODY PRE CHIAMATA REINVIA FATTURA ${body}"/>

                        <!-- chiamata nuovo metodo reinvia da database -->
                        <to uri="direct:reinvia-fattura"/>

                    </split>

                </when>
                <otherwise>
                    <log message="Fatture: lista identificativi sdi vuota, non devo fare operazioni"/>
                </otherwise>
            </choice>

            <!-- REINVIA DECORRENZA TERMINI PEC -->
            <choice>
                <when>
                    <simple>${headers.listaIdentificativiSdIDecorrenze} != '' and ${headers.listaIdentificativiSdIDecorrenze} != null </simple>
                    <log message="listaIdentificativiSdiDecorrenze non vuota"/>
                    <setHeader headerName="listaIdentificativiSdI">
                        <simple>${headers.listaIdentificativiSdIDecorrenze}</simple>
                    </setHeader>
                    <convertBodyTo type="java.lang.String"/>


                    <bean ref="utils" method="controllaListaSDI"/>

                    <setBody>
                        <header>listaIdentificativiSdI</header>
                    </setBody>

                    <log message="listaIdentificativiSdI: [${headers.listaIdentificativiSdI}]"/>

                    <split>
                        <tokenize token=","  includeTokens="false" trim="true"/>

                        <log message="INVIA DECORRENZA TERMINI DA DATABASE Identificativo SdI: ${body}"/>

                        <bean ref="utils" method="prepareExchange"/>

                        <log message="BODY PRE CHIAMATA REINVIA DECORRENZA TERMINI ${body}"/>

                        <!-- chiamata nuovo metodo reinvia da database -->
                        <to uri="direct:reinvia-decorrenza-termini"/>

                        <log message="REINVIA PEC NON CONSEGNATE FINISHED"/>

                    </split>

                </when>
                <otherwise>
                    <log message="Dec. Termini: lista identificativi sdi vuota, non devo fare operazioni"/>
                </otherwise>
            </choice>
        </route>

        <!-- FINE REINVIA PEC CA -->

        <!--Sostituisce gli headers dello slave in caso di failover-->
        <route id="api.rest.services.monitoraggio.headers.slave">
            <from uri="direct:setta-headers-jolokia-slave"/>
            <!--SLAVE-->
            <setHeader headerName="jolokiaUrl">
                <simple>{{api.rest.jolokia.url.slave}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaUsername">
                <simple>{{api.rest.jolokia.username.slave}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaPassword">
                <simple>{{api.rest.jolokia.password.slave}}</simple>
            </setHeader>

            <setHeader headerName="brokerFirstPart">
                <simple>{{api.rest.jolokia.broker.url.first.part}}</simple>
            </setHeader>

            <setHeader headerName="brokerSecondPart">
                <simple>{{api.rest.jolokia.broker.url.second.part}}</simple>
            </setHeader>

            <setHeader headerName="brokerAttribute">
                <simple>{{api.rest.jolokia.broker.attribute}}</simple>
            </setHeader>

            <setHeader headerName="destinationName">
                <simple>{{api.rest.jolokia.broker.destination.name}}</simple>
            </setHeader>

            <process ref="autenticazioneProcess"/>

            <bean ref="jolokiaClient" method="getJolokiaDLQ"/>

            <choice>
                <when>
                    <simple>${body} != null</simple>

                    <process ref="statoCodeResponseProcess"/>
                </when>
            </choice>

        </route>

        <route id="invia-nome-report-coda-route">
            <from uri="direct:invia-nome-report-coda"/>

            <setBody>
                <simple>${headers.MONITORAGGIO.nomeReport}</simple>
            </setBody>

            <setHeader headerName="MONITORAGGIO.dataRielaborazione">
                <simple>${date:now:dd-MM-yyyy HH:mm:ss}</simple>
            </setHeader>

            <inOnly uri="activemq:{{api.rest.monitoraggio.report.mail.queue.in}}"/>
        </route>


        <route id="reinvia-fattura-route">
            <from uri="direct:reinvia-fattura"/>

            <log message="MONITORAGGIO REINVIO FATTURA - START"/>

            <to uri="direct:reinvia-fattura-setta-header"/>

            <setHeader headerName="onlyRegistrazione">
                <simple>${body[1].onlyRegistrazione}</simple>
            </setHeader>

            <split>
                <simple>${body[1].identificativoSdi}</simple>

                <log message="MONITORAGGIO REINVIO FATTURA - IDENTIFICATIVO SDI ${body}"/>

                <doTry>
                    <bean ref="reinviaFatturaImpl" method="recuperaFatturaDalDatabase"/>

                    <doCatch>
                        <exception>it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPAEnteNonTrovatoException</exception>
                        <inOnly uri="{{DLQ.reinvio.fattura.senza.metadati}}" />
                    </doCatch>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <inOnly uri="{{DLQ.reinvio.fattura.errore.generico}}" />
                    </doCatch>
                </doTry>

                <removeHeaders pattern="CamelHttp*" />


                <choice>
                    <!--Caso: vecchio WS baipassando la protocollazione-->
                    <when>
                        <simple>${headers.vecchioWS} == true &amp;&amp; ${headers.onlyRegistrazione} == true </simple>

                        <log message="MONITORAGGIO REINVIO FATTURA - VECCHIO WS CUSTOM - SOLO REGISTRAZIONE - coda: ${headers.codaGestionale}"/>

                        <toD uri="activemq:${headers.codaGestionale}"/>

                    </when>
                    <!--CASO: Canale Avanzato + NON invio unico + baipassando la protocollazione-->
                    <when>
                        <simple>${headers.invioUnico} == false &amp;&amp;  ${headers.vecchioWS} == false &amp;&amp; ${headers.onlyRegistrazione} == true </simple>

                        <log message="MONITORAGGIO REINVIO FATTURA - CANALE AVANZATO - SOLO REGISTRAZIONE"/>

                        <toD uri="activemq:${headers.codaGestionale}"/>
                    </when>
                    <!--CASI: - Canale avanzato + invio unico; - PEC-->
                    <otherwise>
                        <log message="MONITORAGGIO REINVIO FATTURA - INVIO AL PROTOCOLLO"/>

                        <inOnly uri="{{validationServiceInQueue}}"/>
                    </otherwise>
                </choice>
            </split>

            <log message="MONITORAGGIO REINVIO FATTURA - END"/>
        </route>


        <route id="reinvia-decorrenza-termini-route">
            <from uri="direct:reinvia-decorrenza-termini"/>

            <log message="MONITORAGGIO REINVIO DECORRENZA TERMINI - START"/>

           <!-- <bean ref="utility" method="eliminaSDIdoppi"/>-->

            <split>
                <simple>${body[1].identificativoSdi}</simple>

                <log message="MONITORAGGIO REINVIO DECORRENZA TERMINI - IDENTIFICATIVO SDI ${body}"/>

                <doTry>
                    <bean ref="reinviaFatturaImpl" method="recuperaDecorrenzaTerminiDalDatabase"/>
                    <removeHeaders pattern="CamelHttp*" />

                    <inOnly uri="{{validationServiceInQueue}}"/>

                    <doCatch>
                        <exception>java.lang.Exception</exception>

                        <log message="MONITORAGGIO REINVIO DECORRENZA TERMINI catturata eccezione!!! " loggingLevel="ERROR"/>

                        <inOnly uri="{{DLQ.reinvio.fattura.errore.generico}}" />
                    </doCatch>
                </doTry>
            </split>
            <log message="MONITORAGGIO REINVIO DECORRENZA TERMINI - END"/>
        </route>


        <route id="reinvia-fattura-setta-header-route">
            <from uri="direct:reinvia-fattura-setta-header"/>

            <setHeader headerName="giunta">
                <simple>{{codice.ufficio.giunta}}</simple>
            </setHeader>
            <setHeader headerName="consiglio">
                <simple>{{codice.ufficio.consiglio}}</simple>
            </setHeader>
            <setHeader headerName="aziendeOspedaliere">
                <simple>{{codice.ufficio.aziende.ospedaliere}}</simple>
            </setHeader>

        </route>

    </routeContext>
</blueprint>