<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
                               http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                               http://camel.apache.org/schema/blueprint
                               http://camel.apache.org/schema/blueprint/camel-blueprint-2.12.0.xsd">


    <routeContext id="api.rest.rielabora.messaggi.ctx" xmlns="http://camel.apache.org/schema/blueprint">


        <!-- effettua lo spostamento dei messaggi da dlq a relativa coda operativa, prendendo la lista
         delle dlq sulle quali operare dal body -->
        <route id="api.rest.rielabora.messaggi">
            <from uri="direct:rielabora-messaggi-dlq"/>

            <log message="RIELABORA MESSAGGI DA DLQ STARTED"/>

            <setBody>
                <simple>${property.original_body}</simple>
            </setBody>

            <!-- aggiungo header http method per effettuare correttamente la chiamata al broker -->
            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>

            <split>
                <simple>${body}</simple>

                <setHeader headerName="DLQqueueName">
                    <simple>${body}</simple>
                </setHeader>

                <log message="RIELABORA MESSAGGI coda in oggetto: ${body}"/>

                <!-- le code per il quale effettuare il riavvio sono una lista, dunque questa operazione deve essere effettuata
                una volta per ognuna di queste-->

                <loadBalance>
                <failover></failover>
                    <to uri="direct:chiama-jolokia-master"/>
                    <to uri="direct:chiama-jolokia-slave"/>
                </loadBalance>

                <setHeader headerName="dlqInSize">
                    <simple>${body.getValue()}</simple>
                </setHeader>

                <log message="RIELABORA MESSAGGI coda ${header.DLQqueueName} size ${header.dlqInSize}"/>

                <choice>
                    <when>
                        <simple>${header.dlqInSize} == null</simple>

                        <log message="RIELABORA MESSAGGI coda VUOTA, vado avanti alla prossima"/>
                    </when>
                    <otherwise>

                        <bean ref="reinviaMessaggiDaDLQ" method="scodaDlq" id="reinviaMessaggiBeanJava"/>
                    </otherwise>
                </choice>

            </split>

        </route>


        <route id="route.chiama.jolokia.master">
            <from uri="direct:chiama-jolokia-master"/>

            <!--MASTER-->
            <setHeader headerName="jolokiaUrl">
                <simple>{{api.rest.jolokia.url.master}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaUsername">
                <simple>{{api.rest.jolokia.username.master}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaPassword">
                <simple>{{api.rest.jolokia.password.master}}</simple>
            </setHeader>

            <setHeader headerName="brokerFirstPart">
                <simple>{{api.rest.jolokia.broker.url.first.part}}</simple>
            </setHeader>

            <setHeader headerName="brokerSecondPart">
                <simple>{{api.rest.jolokia.broker.url.second.part}}</simple>
            </setHeader>
            <setHeader headerName="destinationName">
                <simple>${header.DLQqueueName}</simple>
            </setHeader>

            <setHeader headerName="brokerAttribute">
                <simple>{{api.rest.jolokia.broker.attribute}}</simple>
            </setHeader>

            <bean ref="jolokiaClient" method="getJolokiaDLQ"/>

        </route>

        <route id="route.chiama.jolokia.slave">
            <from uri="direct:chiama-jolokia-slave"/>

            <!--MASTER-->
            <setHeader headerName="jolokiaUrl">
                <simple>{{api.rest.jolokia.url.slave}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaUsername">
                <simple>{{api.rest.jolokia.username.slave}}</simple>
            </setHeader>

            <setHeader headerName="jolokiaPassword">
                <simple>{{api.rest.jolokia.password.slave}}</simple>
            </setHeader>

            <setHeader headerName="brokerFirstPart">
                <simple>{{api.rest.jolokia.broker.url.first.part}}</simple>
            </setHeader>

            <setHeader headerName="brokerSecondPart">
                <simple>{{api.rest.jolokia.broker.url.second.part}}</simple>
            </setHeader>
            <setHeader headerName="destinationName">
                <simple>${header.DLQqueueName}</simple>
            </setHeader>

            <setHeader headerName="brokerAttribute">
                <simple>{{api.rest.jolokia.broker.attribute}}</simple>
            </setHeader>

            <bean ref="jolokiaClient" method="getJolokiaDLQ"/>
        </route>

        
        <route id="queue.stacktrace.route">
            <from uri="{{gestione.stacktrace.out.queue}}"/>
            <choice>
                <when>
                    <simple>${headers.fatturazioneTest} == false || ${headers.fatturazioneTest} == null </simple>
                    <log message="queue.stacktrace: scodato" loggingLevel="DEBUG"/>

                    <bean ref="monitorRielaborazioniImpl" method="updateMonitorRielaborazioni"/>
                </when>
            </choice>

            
        </route>
        
    </routeContext>

</blueprint>