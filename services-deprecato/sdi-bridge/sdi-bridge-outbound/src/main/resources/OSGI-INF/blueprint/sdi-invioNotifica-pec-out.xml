<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
                               http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<camelContext managementNamePattern="#symbolicName#-#counter#" useMDCLogging="true" xmlns="http://camel.apache.org/schema/blueprint" id="sdi.esito.pec.outbound">

		<!-- *********** EXCEPTION CATCHER DECLARATION *********** -->
		<onException useOriginalMessage="true">
			<exception>it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPAFatalException</exception>
			<redeliveryPolicy maximumRedeliveries="0" />

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.salva.fatture.persistence?level=ERROR&amp;showAll=true&amp;multiline=true" />

		</onException>

		<onException useOriginalMessage="true">
			<exception>java.lang.Exception</exception>
			<redeliveryPolicy maximumRedeliveries="0" />

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.tracing.persistence?level=ERROR&amp;showAll=true&amp;multiline=true" />

		</onException>

		<onException useOriginalMessage="true" redeliveryPolicyRef="notificaEsitoToSdiRedeliveryPolicyConfig">
			<exception>it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPaPersistenceException</exception>

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.tracing.persistence?level=ERROR&amp;showAll=true&amp;multiline=true" />
			<!--<inOnly uri="{{notifica.esito.pec.persistence.dlq}}" />
			<inOnly uri="{{error.notification.queue}}" />-->
		</onException>

		<onException useOriginalMessage="true" redeliveryPolicyRef="notificaEsitoToSdiRedeliveryPolicyConfig">
			<exception>it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPaSDIServizioNonDisponibileException</exception>
			<exception>org.apache.cxf.binding.soap.SoapFault</exception>

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<log message="###################### FatturaPaSDIServizioNonDisponibileException oppure SoapFault"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.tracing.persistence?level=ERROR&amp;showAll=true&amp;multiline=true" />
			<!--
                        <inOnly uri="{{notifica.esito.pec.sdi.dlq}}" />
            -->

			<!-- al mittente NON deve essere restituita una notifica, dunque le righe successive non servono piu' -->

			<!-- in questo punto il messaggio non ha l'esito della dallo sdi, perche' usa l'originaMessage. Di conseguenza
			 e' necessario settare l'header che contiene il tipo di messaggio "servizio non disponibile" cioe' ES_02 -->
			<!--<setHeader headerName="esitoRisposta">
				<constant>ES02</constant>
			</setHeader>
			<to uri="direct-vm:sdi.notifica.esito.inoltro.errore"/> -->
		</onException>

		<!-- *********** END EXCEPTION CATCHER DECLARATION *********** -->

		<!-- *********** ROTTA PRINCIPALE CHE PRENDE I DATI DALLA CODA DEI MESSAGGI RICEVUTI DAGLI ENTI E POI INVIA IL MESSAGGIO ALLO SDI *********** -->
		<route id="sdi.invio.esito.pec.outbound">
			<from uri="{{sdi.outbound.invio.notifica.pec.queue}}"/>

			<log message="SDI OUTBOUND INVIO NOTIFICA PEC STARTED"/>


			<!--Controlla se è una fattura di TEST. Nel caso il flusso si ferma qui'-->
			<process ref="gestioneFatturaDiTest"/>

			<choice>
				<when>
					<simple>${headers.fatturazioneTest} == 'false'</simple>

					<!--
                    <bean ref="notificaEsitoPec" method="preparaMessaggioNotifica"/>

                    <to uri="{{sdi.outbound.cxf.endpoint.invio.notifica}}?headerFilterStrategy=#inviaNotificheFilterStrategy" id="invioNotificaSdi" />

                    <to uri="direct:aggiornaFatturaInviatoSdi"/>

                    <to uri="direct-vm:estraiRispostaFromSdiPec"/>
                    -->

					<!-- Modifica fatta per permettere la protocollazione delle notifiche esito committente -->
					<enrich strategyRef="sdiOutboundAggregationStrategy" id="idSdiOutboundEnricher">
						<simple>{{sdi.outbound.invio.notifica.pec.send}}</simple>
					</enrich>

					<choice>
						<when>
							<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != ''</simple>

							<choice>
								<when>
									<simple>${headers.tipoMessaggio} == 'NotificaScartoEsito'</simple>

									<!-- Nel caso di NotificaScartoEsito devo mandare in protocollazione sia la notifica esito committente che la notifica scarto esito committente -->
									<enrich strategyRef="protocollazioneCANotificaECScartataStrategy" id="idProtocollazioneCANotificaScartoECEnrich">
										<simple>{{sdi.outbound.invio.notifica.ec.scartata.pec.send}}</simple>
									</enrich>

								</when>

							</choice>

							<removeHeaders pattern="NEC_*"/>

							<bean ref="notificaEsitoPec" method="preparaMessaggioPerProtocollazione"/>
							<!-- Bisogna passare dal modulo multiente -->
							<inOnly uri="{{sdi.outbound.invio.risposta.sdi.to.enti}}"/>

						</when>
					</choice>
				</when>
			</choice>
		</route>

		<route id="sdi.invio.esito.pec.estrai.risposta">

			<from uri="direct-vm:estraiRispostaFromSdiPec"/>

			<log message="SDI INVIO ESITO PEC ESTRAI RISPOSTA STARTED"/>

			<!-- se la risposta ottenuta e' uno scarto allora devo inoltrare una email al mittente con il messaggio ricevuto, altrimenti finisce.
			In caso di "Servizio Non Disponibile" o soapFault viene lanciata e catturata una eccezione il cui trattamento e' governato da una
			redelivery policy. In caso di insuccesso il messaggio viene messo in una dlq -->

			<bean ref="notificaEsitoPec" method="estraiRispostaFromSdi"/>

			<choice>
				<when>
					<simple>${in.header.esitoRisposta} == 'ES00'</simple>

					<!-- Nel caso di Scarto di tipo EN02 verrà inserito lo stato di Notifica Accettata e quindi non bisogna creare la mail di errore -->
					<choice>
						<when>
							<simple>${in.header.isScartoEN02} == 'no'</simple>

							<choice>
								<when>
									<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != ''</simple>
									<inOnly uri="{{enti.bridge.pec.ca.notifica.esito.inoltro.errore}}"/>
								</when>
								<otherwise>
									<inOnly uri="{{enti.bridge.pec.notifica.esito.inoltro.errore}}"/>
								</otherwise>
							</choice>

						</when>
					</choice>

					<!--inOnly uri="{{enti.bridge.pec.notifica.esito.inoltro.errore}}"/-->

					<!--<to uri="direct-vm:sdi.notifica.esito.inoltro.errore"/>-->
				</when>
			</choice>

			<to uri="direct:aggiornaFatturaRispostaSdi"/>

			<choice>
				<when>
					<!-- REGMA 112 controllo se si tratta di una fattura interna ed eventualmente eseguo la rotta che tratta il caso -->

					<simple>${in.header.checkFlussoSemplificato} == 'checkFlussoSemplificato' and ${in.header.esitoRisposta} == 'ES01'</simple>

					<log message="SDI INVIO ESITO PEC FLUSSO SEMPLIFICATO "/>

					<inOnly uri="{{sdi.invio.notifica.flusso.semplificato.in.queue}}"/>

				</when>
			</choice>
		</route>

		<route>
			<from uri="direct-vm:sdi.notifica.esito.inoltro.errore"/>

			<log message="SDI NOTIFICA ESITO INOLTRO ERRORE STARTED"/>

			<choice>
				<when>
					<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != ''</simple>
						<inOnly uri="{{enti.bridge.pec.ca.notifica.esito.inoltro.errore}}"/>
				</when>
				<otherwise>
					<inOnly uri="{{enti.bridge.pec.notifica.esito.inoltro.errore}}"/>
				</otherwise>
			</choice>

		</route>

		<route id="aggiornaFatturaRispostaSdi">
			<from uri="direct:aggiornaFatturaRispostaSdi"/>

			<log message="SDI BRIDGE OUTBOUND PEC NOTIFICA ESITO RICEVUTA RISPOSTA SDI AGGIORNAMENTO FATTURA"/>

			<bean ref="notificaEsitoPec" method="aggiornaFatturaRispostaSdi"/>

			<log message="SDI BRIDGE OUTBOUND PEC NOTIFICA ESITO RICEVUTA RISPOSTA SDI: FATTURA AGGIORNATA"/>
		</route>

		<route id="aggiornaFatturaInviatoSdi">
			<from uri="direct:aggiornaFatturaInviatoSdi"/>

			<log message="SDI BRIDGE OUTBOUND PEC NOTIFICA ESITO INVIATA RISPOSTA SDI AGGIORNAMENTO FATTURA"/>

			<bean ref="notificaEsitoPec" method="aggiornaFatturaInvioSdi"/>

			<log message="SDI BRIDGE OUTBOUND PEC NOTIFICA ESITO INVIATA RISPOSTA SDI: FATTURA AGGIORNATA"/>
		</route>

		<!-- ********+* SDI OUTBOUND ENRICHER ********* -->
		<route id="sdi.outbound.invio.notifica.send">
			<from uri="{{sdi.outbound.invio.notifica.pec.send}}"/>

			<!-- Prima di chiamare il SdI setto la notifica di esito committente in un header (tanto la dimensione è sempre quella) -->
			<choice>
				<when>
					<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != ''</simple>

						<to uri="direct:nec_setHeaders"/>

				</when>
			</choice>

			<bean ref="notificaEsitoPec" method="preparaMessaggioNotifica"/>

			<to uri="{{sdi.outbound.cxf.endpoint.invio.notifica}}?headerFilterStrategy=#inviaNotificheFilterStrategy" id="invioNotificaSdi" />

			<to uri="direct:aggiornaFatturaInviatoSdi"/>

			<to uri="direct-vm:estraiRispostaFromSdiPec"/>

		</route>
		<!-- ********+* FINE SDI OUTBOUND ENRICHER ********* -->

		<route id="NEC_headers">
			<from uri="direct:nec_setHeaders"/>

			<log message="SDI BRIDGE OUTBOUND PEC - CA - NOTIFICA EC SET HEADERS "/>

			<!-- Body -->
			<setHeader headerName="NEC_Body">
				<simple>${body}</simple>
			</setHeader>

			<!-- Headers -->
			<setHeader headerName="NEC_canaleAvanzato">
				<simple>${headers.canaleAvanzato}</simple>
			</setHeader>
			<setHeader headerName="NEC_nomeFileNotificaEsito">
				<simple>${headers.nomeFileNotificaEsito}</simple>
			</setHeader>
			<setHeader headerName="NEC_identificativoSdI">
				<simple>${headers.identificativoSdI}</simple>
			</setHeader>
			<setHeader headerName="NEC_checkFlussoSemplificato">
				<simple>${headers.checkFlussoSemplificato}</simple>
			</setHeader>
			<setHeader headerName="NEC_tipoMessaggio">
				<constant>NotificaEsitoCommittente</constant>
			</setHeader>
			<setHeader headerName="NEC_tipoNotifica">
				<constant>notificaOk</constant>
			</setHeader>

		</route>

		<!-- ********+* PROTOCOLLAZIONE CA NOTIFICA EC SCARTATA ENRICHER ********* -->
		<route id="sdi.outbound.invio.notifica.ec.scartata.pec.send">
			<from uri="{{sdi.outbound.invio.notifica.ec.scartata.pec.send}}"/>

			<!-- Body -->
			<setBody>
				<simple>${headers.NEC_Body}</simple>
			</setBody>

			<!-- Headers -->
			<setHeader headerName="canaleAvanzato">
				<simple>${headers.NEC_canaleAvanzato}</simple>
			</setHeader>
			<setHeader headerName="nomeFileNotificaEsito">
				<simple>${headers.NEC_nomeFileNotificaEsito}</simple>
			</setHeader>
			<setHeader headerName="identificativoSdI">
				<simple>${headers.NEC_identificativoSdI}</simple>
			</setHeader>
			<setHeader headerName="checkFlussoSemplificato">
				<simple>${headers.NEC_checkFlussoSemplificato}</simple>
			</setHeader>
			<setHeader headerName="tipoMessaggio">
				<simple>${headers.NEC_tipoMessaggio}</simple>
			</setHeader>
			<setHeader headerName="tipoNotifica">
				<simple>${headers.NEC_tipoNotifica}</simple>
			</setHeader>

			<removeHeaders pattern="NEC_*"/>

			<bean ref="notificaEsitoPec" method="preparaMessaggioPerProtocollazione"/>
			<!-- Bisogna passare dal modulo multiente -->
			<inOnly uri="{{sdi.outbound.invio.risposta.sdi.to.enti}}"/>

		</route>
		<!-- ********+* FINE PROTOCOLLAZIONE CA NOTIFICA EC SCARTATA ENRICHER ********* -->

	</camelContext>

</blueprint>
