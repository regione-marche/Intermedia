<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
                               http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                               http://camel.apache.org/schema/blueprint
                               http://camel.apache.org/schema/blueprint/camel-blueprint-2.12.0.xsd">

	<bean id="notificaEsitoToSdiRedeliveryPolicyConfig" class="org.apache.camel.processor.RedeliveryPolicy">
		<property name="maximumRedeliveries" value="${notifica.esito.sdi.retry.attempts}" />
		<property name="redeliveryDelay" value="${notifica.esito.sdi.retry.delay}" />
	</bean>

	<camelContext managementNamePattern="#symbolicName#-#counter#" useMDCLogging="true"
				  xmlns="http://camel.apache.org/schema/blueprint" id="sdi.esito.Outbound"
				  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


        <template id="producer" camelContextId="sdi.esito.Outbound"/>
        <!-- define a consumer template -->
        <consumerTemplate id="consumer" camelContextId="sdi.esito.Outbound"/>


        <!-- *********** DATAFORMATS DECLARATION *********** -->
		<dataFormats>
			<jaxb id="esitoFatturaMessageRequestFormat" prettyPrint="true"
				  contextPath="it.extrasys.marche.regione.fatturapa.contracts.esito.fattura.from.enti.beans"/>
		</dataFormats>
		<!-- *********** END DATAFORMATS DECLARATION *********** -->

		<!-- *********** EXCEPTION CATCHER DECLARATION *********** -->
		<onException useOriginalMessage="true">
			<exception>it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPAFatalException</exception>
			<redeliveryPolicy maximumRedeliveries="0"/>

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.salva.fatture.persistence?level=ERROR&amp;showAll=true&amp;multiline=true"/>

		</onException>

		<onException useOriginalMessage="true">
			<exception>java.lang.Exception</exception>
			<redeliveryPolicy maximumRedeliveries="0"/>

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.tracing.persistence?level=ERROR&amp;showAll=true&amp;multiline=true"/>
		</onException>

		<onException useOriginalMessage="true" redeliveryPolicyRef="notificaEsitoToSdiRedeliveryPolicyConfig">
			<exception>it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPaPersistenceException</exception>

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.tracing.persistence?level=ERROR&amp;showAll=true&amp;multiline=true"/>
			<!--<to uri="{{notifica.esito.persistence.dlq}}"/>
			<to uri="{{error.notification.queue}}"/>-->
		</onException>

		<onException useOriginalMessage="true" redeliveryPolicyRef="notificaEsitoToSdiRedeliveryPolicyConfig">
			<exception>
				it.extrasys.marche.regione.fatturapa.core.exceptions.FatturaPaSDIServizioNonDisponibileException
			</exception>
			<exception>org.apache.cxf.binding.soap.SoapFault</exception>

			<!--Mette in coda lo stacktrace-->
			<setHeader headerName="exception">
				<simple>${exception.stacktrace}</simple>
			</setHeader>

			<wireTap uri="{{gestione.stacktrace.in.queue}}"/>

			<log message="###################### FatturaPaSDIServizioNonDisponibileException oppure SoapFault"/>

			<to uri="log:it.extrasys.marche.regione.fatturapa.tracing.persistence?level=ERROR&amp;showAll=true&amp;multiline=true"/>
			<!--<to uri="{{notifica.esito.sdi.dlq}}"/>
			<to uri="{{error.notification.queue}}"/>-->
		</onException>

		<!-- *********** END EXCEPTION CATCHER DECLARATION *********** -->


        <!-- CBR  -->
        <route id="sdi.invio.esito.outbound.cbr">
            <from uri="{{sdi.outbound.invio.notifica.queue}}"/>
            <choice>
                <when>
                    <simple>${in.header.validationResult} == false</simple>
                    <inOnly uri="{{sdi.outbound.invio.notifica.wait.queue}}"/>
                </when>
                <otherwise>
                    <inOnly uri="{{sdi.outbound.invio.notifica.send.queue}}"/>
                </otherwise>
            </choice>

        </route>


        <!-- SCODAMENTO TEMPORIZZATO  -->
        <route id="sdi.invio.esito.outbound.wait2send">
            <!--    <from uri="{{sdi.outbound.invio.notifica.wait.queue}}"/> -->
            <from uri="{{sdi.invio.esito.outbound.wait2send.timer}}"/>
            <log message="SDI  OUTBOUND : START GESTIONE CODA WAIT" loggingLevel="INFO"/>
            <process ref="gestioneCodaWait"/>
            <log message="SDI  OUTBOUND : END GESTIONE CODA WAIT" loggingLevel="INFO"/>
        </route>


        <!-- *********** ROTTA PRINCIPALE CHE PRENDE I DATI DALLA CODA DEI MESSAGGI RICEVUTI DAGLI ENTI E POI INVIA IL MESSAGGIO ALLO SDI *********** -->
		<route id="sdi.invio.esito.outbound">
            <from uri="{{sdi.outbound.invio.notifica.send.queue}}"/>

			<!--
			<bean ref="notificaEsitoManager" method="convertNotificaEsitoCommittenteToEsitoFatturaMessageRequest"/>

			<removeHeaders pattern="operationName*"/>
			<removeHeader headerName="SOAPAction"/>

			<to uri="{{sdi.outbound.cxf.endpoint.invio.notifica}}?headerFilterStrategy=#inviaNotificheFilterStrategy" id="invioNotificaSdi"/>

			<bean ref="notificaEsitoManager" method="estraiRispostaFromSdi"/>

			<inOnly uri="{{sdi.notifica.outbound.aggiorna.fattura.queue}}"/>
        	-->

			<!--Controlla se Ã¨ una fattura di TEST. Nel caso il flusso si ferma qui'-->
			<process ref="gestioneFatturaDiTest"/>

			<choice>
				<when>
					<simple>${headers.fatturazioneTest} == 'false'</simple>

					<!-- Modifica fatta per permettere la protocollazione delle notifiche esito committente -->
					<enrich strategyRef="sdiOutboundAggregationStrategy" id="idSdiOutboundEnricher">
						<simple>{{sdi.outbound.invio.notifica.send}}</simple>
					</enrich>

					<choice>
						<when>
							<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != '' and ${headers.canaleAvanzato} == true and ${headers.tipoMessaggio} != 'NotificaScartoEsito'</simple>

							<bean ref="notificaEsitoManager" method="preparaMessaggioPerProtocollazione"/>
							<!-- Bisogna passare dal modulo multiente -->
							<inOnly uri="{{sdi.outbound.invio.risposta.sdi.to.enti}}"/>

						</when>
					</choice>
				</when>
			</choice>


		</route>

		<route id="sdi.notifica.outbound.aggiorna.fattura">

			<from uri="{{sdi.notifica.outbound.aggiorna.fattura.queue}}"/>
			<!-- devo aggiornare lo stato della fattura e anche il progressivo d'invio -->

			<bean ref="notificaEsitoManager" method="aggiornaFattura"/>

			<!-- devo verificare l'header "tipoNotifica" e verificare il tipo di messaggio che e' stato restituito -->
			<choice>
				<when>
					<simple>${in.header.tipoNotifica} == "notificaScarto"</simple>

					<!-- la risposta ottenuta dallo SDI e' una notifica di scarto, dunque la devo processare e inviare all'ente -->
					<to uri="{{sdi.outbound.notifica.scarto.direct}}"/>
				</when>
				<when>
					<simple>${in.header.tipoNotifica} == "notificaOk"</simple>

					<!-- la risposta ottenuta dallo SDI e' un ok, dunque la salvo su db e sono a posto -->
					<to uri="{{sdi.outbound.notifica.ok.direct}}"/>
				</when>
			</choice>

		</route>
		<!-- *********** FINE ROTTA PRINCIPALE *********** -->

		<route id="sdi.notifica.ok.outbound">
			<from uri="{{sdi.outbound.notifica.ok.direct}}"/>

			<log message="NOTIFICA OK PER LA FATTURA/LOTTO FATTURE AVENTE IDENTIFICATIVO SDI ${headers.identificativoSdI}"
				 loggingLevel="INFO"/>

			<process ref="notificaOkProcessor" id="notificaOk"/>

			<choice>
				<when>
					<!-- REGMA 112 controllo se si tratta di una fattura interna ed eventualmente eseguo la rotta che tratta il caso -->

					<simple>${in.header.checkFlussoSemplificato} == 'checkFlussoSemplificato'</simple>

					<inOnly uri="{{sdi.invio.notifica.flusso.semplificato.in.queue}}"/>

				</when>
			</choice>
		</route>

		<route id="sdi.notifica.scarto.outbound">
			<from uri="{{sdi.outbound.notifica.scarto.direct}}"/>

			<log message="NOTIFICA SCARTO PER LA FATTURA/LOTTO FATTURE AVENTE IDENTIFICATIVO SDI ${headers.identificativoSdI}"
				 loggingLevel="INFO"/>

			<setHeader headerName="tipoMessaggio">
				<simple>NotificaScartoEsito</simple>
			</setHeader>

			<process ref="notificaScartoProcessor" id="notificaScarto"/>

			<choice>
				<when>
					<simple>${in.header.validationResult} == false</simple>
					<!-- rifiuto automatico: devo inviare il messaggio ad una coda che salvi la notifica senza inviarla al multiente -->

					<log message="SDI INVIO NOTIFICA OUTBOUND: RICEVUTO SCARTO A SEGUITO DI UN RIFIUTO PER LA FATTURA/LOTTO FATTURE AVENTE IDENTIFICATIVO SDI ${headers.identificativoSdI}; BODY: [${body}]" loggingLevel="INFO"/>

					<inOnly uri="{{sdi.outbound.validazioneko.ricevuto.scarto.coda.notifica}}"/>
				</when>
				<otherwise>
					<!-- accettazione/rifiuto, deo girare il messaggio al multiente -->

					<choice>
						<when>
							<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != '' and ${headers.canaleAvanzato} == true</simple>

							<log message="SDI INVIO NOTIFICA OUTBOUND: CANALE AVANZATO - RICEVUTO SCARTO INVIO IN PROTOCOLLAZIONE SIA LA NOTIFICA ESITO COMMITTENTE CHE LA NOTIFICA SCARTO ESITO COMMITTENTE"/>

							<!-- Nel caso di NotificaScartoEsito devo mandare in protocollazione sia la notifica esito committente che la notifica scarto esito committente -->
							<enrich strategyRef="protocollazioneCANotificaECScartataStrategy" id="idProtocollazioneCANotificaScartoECEnrich">
								<simple>{{sdi.outbound.invio.notifica.ec.scartata.send}}</simple>
							</enrich>

							<removeHeaders pattern="NEC_*"/>
						</when>
					</choice>

					<log message="SDI INVIO NOTIFICA OUTBOUND: RICEVUTO SCARTO A SEGUITO DI UN ACCETTAZIONE/RIFIUTO DA ENTE PER LA FATTURA/LOTTO FATTURE AVENTE IDENTIFICATIVO SDI ${headers.identificativoSdI}: INVIO ALL' ENTE"/>
					<inOnly uri="{{sdi.outbound.invio.risposta.sdi.to.enti}}"/>

				</otherwise>
			</choice>
		</route>

		<!-- ********+* SDI OUTBOUND ENRICHER ********* -->
		<route id="sdi.outbound.invio.notifica.send">
			<from uri="{{sdi.outbound.invio.notifica.send}}"/>

			<choice>
				<when>
					<simple>${headers.canaleAvanzato} != null and ${headers.canaleAvanzato} != '' and ${headers.canaleAvanzato} == true</simple>
					<log message="SDI INVIO NOTIFICA OUTBOUND: CANALE AVANZATO"/>

					<setHeader headerName="NEC_Body">
						<simple>${body}</simple>
					</setHeader>

					<convertBodyTo type="it.extrasys.marche.regione.fatturapa.contracts.esito.fattura.from.enti.ca.beans.EsitoFatturaMessageRequest"/>
					<bean ref="notificaEsitoManager" method="convertNotificaEsitoCommittenteCAToEsitoFatturaMessageRequest"/>

					<!-- Prima di chiamare il SdI setto la notifica di esito committente in un header (tanto la dimensione Ã¨ sempre quella) -->
					<to uri="direct:nec_setHeaders"/>

				</when>
				<otherwise>
					<bean ref="notificaEsitoManager" method="convertNotificaEsitoCommittenteToEsitoFatturaMessageRequest"/>
				</otherwise>
			</choice>

			<removeHeaders pattern="operationName*"/>
			<removeHeader headerName="SOAPAction"/>

			<to uri="{{sdi.outbound.cxf.endpoint.invio.notifica}}?headerFilterStrategy=#inviaNotificheFilterStrategy" id="invioNotificaSdi"/>

			<bean ref="notificaEsitoManager" method="estraiRispostaFromSdi"/>

			<inOnly uri="{{sdi.notifica.outbound.aggiorna.fattura.queue}}"/>

		</route>
		<!-- ********+* FINE SDI OUTBOUND ENRICHER ********* -->

		<route id="NEC_headers">
			<from uri="direct:nec_setHeaders"/>

			<log message="SDI BRIDGE OUTBOUND - CA - NOTIFICA EC SET HEADERS "/>

			<!-- Headers -->
			<setHeader headerName="NEC_canaleAvanzato">
				<simple>${headers.canaleAvanzato}</simple>
			</setHeader>
			<setHeader headerName="NEC_nomeFileNotificaEsito">
				<simple>${headers.nomeFileNotificaEsito}</simple>
			</setHeader>
			<setHeader headerName="NEC_identificativoSdI">
				<simple>${headers.identificativoSdI}</simple>
			</setHeader>
			<setHeader headerName="NEC_checkFlussoSemplificato">
				<simple>${headers.checkFlussoSemplificato}</simple>
			</setHeader>
			<setHeader headerName="NEC_tipoMessaggio">
				<constant>NotificaEsitoCommittente</constant>
			</setHeader>
			<setHeader headerName="NEC_tipoNotifica">
				<constant>notificaOk</constant>
			</setHeader>

		</route>

		<!-- ********+* PROTOCOLLAZIONE CA NOTIFICA EC SCARTATA ENRICHER ********* -->
		<route id="sdi.outbound.invio.notifica.ec.scartata.send">
			<from uri="{{sdi.outbound.invio.notifica.ec.scartata.send}}"/>

			<!-- Body -->
			<setBody>
				<simple>${headers.NEC_Body}</simple>
			</setBody>

			<!-- Headers -->
			<setHeader headerName="canaleAvanzato">
				<simple>${headers.NEC_canaleAvanzato}</simple>
			</setHeader>
			<setHeader headerName="nomeFileNotificaEsito">
				<simple>${headers.NEC_nomeFileNotificaEsito}</simple>
			</setHeader>
			<setHeader headerName="identificativoSdI">
				<simple>${headers.NEC_identificativoSdI}</simple>
			</setHeader>
			<setHeader headerName="checkFlussoSemplificato">
				<simple>${headers.NEC_checkFlussoSemplificato}</simple>
			</setHeader>
			<setHeader headerName="tipoMessaggio">
				<simple>${headers.NEC_tipoMessaggio}</simple>
			</setHeader>
			<setHeader headerName="tipoNotifica">
				<simple>${headers.NEC_tipoNotifica}</simple>
			</setHeader>

			<removeHeaders pattern="NEC_*"/>

			<bean ref="notificaEsitoManager" method="preparaMessaggioPerProtocollazione"/>

			<setHeader headerName="notificaECProtocollazione">
				<constant>true</constant>
			</setHeader>

			<process ref="notificaOkProcessor" id="notificaOkProtocollazione"/>

			<removeHeader headerName="notificaECProtocollazione"/>

			<inOnly uri="{{sdi.outbound.invio.risposta.sdi.to.enti}}"/>

		</route>
		<!-- ********+* FINE PROTOCOLLAZIONE CA NOTIFICA EC SCARTATA ENRICHER ********* -->

	</camelContext>

</blueprint>